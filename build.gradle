buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'west-stein-rest-service'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile 'org.projectlombok:lombok:1.16.14'
    compile 'io.springfox:springfox-swagger-ui:2.6.1'
    compile 'io.springfox:springfox-swagger2:2.6.1'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'com.h2database:h2:1.4.193'
    compile 'org.springframework.cloud:spring-cloud-starter-feign:1.3.0.RELEASE'
    compile 'ma.glasnost.orika:orika-core:1.5.0'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.7'
    compile 'org.postgresql:postgresql:42.0.0'
    compile 'org.springframework.boot:spring-boot-starter-security:1.5.2.RELEASE'
    compile 'io.jsonwebtoken:jjwt:0.7.0'
    compile 'io.github.openfeign:feign-httpclient:9.5.0'
    compile 'io.github.openfeign:feign-jackson:9.5.0'
    compile 'org.apache.commons:commons-io:1.3.2'

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

processResources {
    Properties props = new Properties();
    if(project.hasProperty('stage')){
        project.property('stage')
        props.load(new FileInputStream("src/profiles/" + project.property('stage') + ".properties"))
    } else {
        props.load(new FileInputStream("src/profiles/local.properties"))
    }
    expand props
}